<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kosta.ems.student.StudentMapper">
	<select id="selectStudentByName" parameterType="string" resultType="com.kosta.ems.student.StudentCourseInfoDTO">
        select s.student_id         as studentId,
               hrd_net_id           as hrdNetID,
               name,
               birth,
               address,
               bank,
               account,
               phone_number         as phoneNumber,
               email,
               gender,
               manager_id           as managerId,
               is_active            as isActive,
               c.student_course_seq as studentCourseSeq,
               c.course_seq         as courseSeq
        from students s
                 left join students_courses c on s.student_id = c.student_id
        where s.name = '%' + #{name} + '%'
          and is_active = 'T'
    </select>
    <!-- 수강생 정보 -->
    <select id="findByStudentNumberOrCourseNumberAll" resultType="int">
    	SELECT COUNT(s.student_id) AS count
FROM students s, courses c, students_courses sc
WHERE s.student_id=sc.student_id AND c.course_seq=sc.course_seq AND 
	(s.student_id IN (SELECT student_id FROM students WHERE NAME LIKE CONCAT('%', #{name}, '%')) OR c.course_seq=(SELECT course_seq FROM courses WHERE course_number=#{courseNumber}));
    </select>
	<select id="findByStudentNameOrCourseNumber" resultType="com.kosta.ems.student.StudentBasicInfoDTO">
		SELECT s.student_id AS studentId, s.hrd_net_id AS hrdNetId, c.course_number AS courseNumber, s.name , s.birth,
	s.address, s.bank, s.account, s.phone_number AS phoneNumber, s.email
FROM students s, courses c, students_courses sc
WHERE s.student_id=sc.student_id AND c.course_seq=sc.course_seq AND 
	(s.student_id IN (SELECT student_id FROM students WHERE name LIKE CONCAT('%', #{name}, '%'))
	OR c.course_seq=(SELECT course_seq FROM courses WHERE course_number=#{courseNumber}))
LIMIT #{start}, #{size}
	</select>
	<!--입력 hrdNetId인지 확인-->
    <select id="findByHrdNetId" parameterType="string" resultType="int">
        SELECT COUNT(hrd_net_id) FROM students
        WHERE hrd_net_id=#{hrdNetId};
    </select>
    <!--기존 수강생 정보 가져오기-->
    <select id="getRegisteredStudentBasicInfo" resultType="com.kosta.ems.student.RegisteredStudentInfoDTO">
    	SELECT student_id AS studentId, name, birth, address, bank, account, phone_number AS phoneNumber, email
FROM students
WHERE hrd_net_id=#{hrdNetId};
    </select>
    <!--수강생 등록(students 테이블)-->
    <insert id="addStudentBasicInfo" parameterType="com.kosta.ems.student.AddStudentBasicInfoDTO">
        INSERT INTO students (hrd_net_id, NAME, birth, address, bank, ACCOUNT, phone_number, email, gender, manager_id)
        VALUES
            (#{hrdNetId}, #{name}, #{birth}, #{address}, #{bank}, #{account}, #{phoneNumber}, #{email}, #{gender}, #{managerId})
    </insert>
    <!--수강생 등록(students_courses 테이블)-->
    <insert id="addStudentCourseSeqInfo" parameterType="com.kosta.ems.student.AddStudentCourseSeqDTO">
        INSERT INTO students_courses (student_id, course_seq)
        VALUES (
                       (SELECT student_id FROM students WHERE hrd_net_id=#{hrdNetId}),
                       (SELECT course_seq FROM courses WHERE course_number=#{courseNumber})
               )
    </insert>
    <!--선택한 수강생 정보 수정-->
    <update id="updateSelectedStudentInfo">
    	UPDATE students
SET NAME=#{dto.name}, address=#{dto.address}, bank=#{dto.bank}, ACCOUNT=#{dto.account}, phone_number=#{dto.phoneNumber}, email=#{dto.email}
WHERE student_id=#{studentId}; 
    </update>
    <!--선택한 수강생 삭제(isActive -> F)-->
    <update id="deleteSelectedStudent">
    	UPDATE students
SET is_active='F'
WHERE student_id=#{studentId};
    </update>
    <!--수강생 출결 목록 가져오기-->
    <select id="selectStudentAttendanceList" resultType="com.kosta.ems.student.StudentAttendanceListDTO">
    	SELECT c.course_number, s.name, s.hrd_net_id AS hrdNetId, c.total_training_days AS totalTrainingDays,
    SUM(CASE WHEN a.attendance_status = '출석' THEN 1 ELSE 0 END) AS 'sumAttendance',
    SUM(CASE WHEN a.attendance_status = '지각' THEN 1 ELSE 0 END) AS 'sumLateness',
    SUM(CASE WHEN a.attendance_status = '조퇴' THEN 1 ELSE 0 END) AS 'sumGoOut',
    SUM(CASE WHEN a.attendance_status = '외출' THEN 1 ELSE 0 END) AS 'sumEarlyLeave',
    SUM(CASE WHEN a.attendance_status = '결석' THEN 1 ELSE 0 END) AS 'sumAbsence'
FROM students_courses sc
JOIN students s ON s.student_id = sc.student_id
JOIN courses c ON sc.course_seq = c.course_seq
LEFT JOIN attendances a ON sc.student_course_seq = a.student_course_seq
WHERE (s.student_id IN (SELECT student_id FROM students WHERE NAME LIKE CONCAT('%', #{name}, '%')) OR c.course_seq = (SELECT course_seq FROM courses WHERE course_number = #{courseNumber}))
GROUP BY c.course_number, s.name, s.hrd_net_id, c.total_training_days
HAVING SUM(CASE WHEN a.attendance_status = '출석' THEN 1 ELSE 0 END) > 0
LIMIT 0, 2;
    </select>
    <!--수강생 출결 상태 수정-->
    <update id="updateStudentAttendance" parameterType="com.kosta.ems.student.UpdateStudentAttendanceStatusDTO">
    	UPDATE attendances
SET attendance_status=#{attendanceStatus}
WHERE attendance_date=#{attendanceDate} AND student_course_seq=(
        SELECT student_course_seq FROM students_courses WHERE student_id=#{studentId});
    </update>
</mapper>